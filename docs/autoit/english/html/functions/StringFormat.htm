<!DOCTYPE html>
<html>
<head>
  <title>Function StringFormat</title>
  <meta charset="ISO-8859-1">
  <link href="../css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1 class="small">Function Reference</h1>
<hr style="height:0px">
<h1>StringFormat</h1>
<p class="funcdesc">Returns a formatted string (similar to the C sprintf() function).<br></p>

<p class="codeheader">
StringFormat ( "format control", var1 [, ... var32] )<br>
</p>

<h2>Parameters</h2>
<table>
  <tr>
    <td style="width:15%">format control</td>
    <td style="width:85%">The format and flags to use (see Remarks).</td>
  </tr>
  <tr>
   <td>var1...var32</td>
   <td>Up to 32 variables that will be output according to the "format control".</td>
  </tr>
</table>


<h2>Return Value</h2>
Return the formatted string according to &quot;variable format&quot; defined in the &quot;format control&quot; parameter.<br>

<h2>Remarks</h2>
To prevent buffer overflow, each &quot;variable&quot; is limited to 65535 characters.<br>
Escape characters can be contain in the &quot;format control&quot; such as \n (@LF), \r (@CR), \t (@TAB]. So if you want to have a &quot;\&quot; you need to use \\, samething for &quot;%&quot; %%.<br>
<br>
&quot;variable format&quot; is; %[flags] [width] [.precision] type<br>
<br>
If a format specification is invalid, the behaviour is undefined. If you specify invalid input you can in special circumstances create unhandled exception and cause program termination.<br>
<br>
&nbsp;&nbsp;&nbsp; <b>Width Specification</b><br>
<br>
The second optional field of the format specification is the width specification. The width argument is a nonnegative decimal integer controlling the minimum number of characters printed. If the number of characters in the output value is less than the specified width, blanks are added to the left or the right of the values ?depending on whether the ?flag (for left alignment) is specified ?until the minimum width is reached. If width is prefixed with 0, zeros are added until the minimum width is reached (not useful for left-aligned numbers).<br>
<br>
The width specification never causes a value to be truncated. If the number of characters in the output value is greater than the specified width, or if width is not given, all characters of the value are printed (subject to the precision specification).<br>
<br>
&nbsp;&nbsp;&nbsp; <b>Type Specification</b><br>
<br>
<br><table>
  <tr>
    <th><b>Type</b></th>
    <th><b>Variable type</b></th>
    <th><b>Output format</b></th>
  </tr>
  <tr>
    <td>d, i</td>
    <td>Integer</td>
    <td>Signed decimal integer.</td>
  </tr>
  <tr>
    <td>o</td>
    <td>Integer</td>
    <td>Unsigned octal integer.</td>
  </tr>
  <tr>
    <td>u</td>
    <td>Integer</td>
    <td>Unsigned decimal integer.</td>
  </tr>
  <tr>
    <td>x</td>
    <td>Integer</td>
    <td>Unsigned hexadecimal integer, using &quot;abcdef&quot;.</td>
  </tr>
  <tr>
    <td>X</td>
    <td>Integer</td>
    <td>Unsigned hexadecimal integer, using &quot;ABCDEF&quot;.</td>
  </tr>
  <tr>
    <td>e</td>
    <td>Float</td>
    <td>Signed value having the form [ - ]<i>d</i><b>.</b><i>dddd</i> <b>e</b> [<i>sign</i>]<i>ddd</i> where <i>d</i> is a single decimal digit, <i>dddd</i> is one or more decimal digits, <i>ddd</i> is exactly three decimal digits, and <i>sign</i> is + or -.</td>
  </tr>
  <tr>
    <td>E</td>
    <td>Float</td>
    <td>Identical to the <b>e</b> format except that <b>E</b> rather than <b>e</b> introduces the exponent.</td>
  </tr>
  <tr>
    <td>f</td>
    <td>Float</td>
    <td>Signed value having the form [ - ]<i>dddd</i><b>.</b><i>dddd</i>, where <i>dddd</i> is one or more decimal digits. The number of digits before the decimal point depends on the magnitude of the number, and the number of digits after the decimal point depends on the requested precision.</td>
  </tr>
  <tr>
    <td>g</td>
    <td>Float</td>
    <td>Signed value printed in <b>f</b> or <b>e</b> format, whichever is more compact for the given value and precision. The <b>e</b> format is used only when the exponent of the value is less than -4 or greater than or equal to the precision argument. Trailing zeros are truncated, and the decimal point appears only if one or more digits follow it.</td>
  </tr>
  <tr>
    <td>G</td>
    <td>Float</td>
    <td>Identical to the <b>g</b> format, except that <b>E</b>, rather than <b>e</b>, introduces the exponent (where appropriate).</td>
  </tr>
  <tr>
    <td>s</td>
    <td>String</td>
    <td>String.</td>
  </tr>
</table><br>
&nbsp;&nbsp;&nbsp; <b>Flag Specification</b><br>
<br>
<br><table>
  <tr>
    <th><b>Flag</b></th>
    <th><b>Meaning</b></th>
    <th><b>Default</b></th>
  </tr>
  <tr>
    <td>-</td>
    <td>Left align the result within the given field width.</td>
    <td>Right align.</td>
  </tr>
  <tr>
    <td>+</td>
    <td>Prefix the output value with a sign (+ or -) if the output value is of a signed type.</td>
    <td>Sign appears only for negative signed values (-).</td>
  </tr>
  <tr>
    <td>0</td>
    <td>If <i>width</i> is prefixed with <b>0</b>, zeros are added until the minimum width is reached. If 0 and - appear, the <b>0</b> is ignored. If <b>0</b> is specified with an integer format (<b>i</b>, <b>u</b>, <b>x</b>, <b>X</b>, <b>o</b>, <b>d</b>) the <b>0</b> is ignored.</td>
    <td>No padding.</td>
  </tr>
  <tr>
    <td>Blank</td>
    <td>Prefix the output value with a blank if the output value is signed and positive; the blank is ignored if both the blank and + flags appear.</td>
    <td>No blank appears.</td>
  </tr>
  <tr>
    <td>#</td>
    <td>When used with the <b>o</b>, <b>x</b>, or <b>X</b> format, the # flag prefixes any nonzero output value with 0, 0x, or 0X, respectively.</td>
    <td>No blank appears.</td>
  </tr>
  <tr>
    <td>#</td>
    <td>When used with the <b>e</b>, <b>E</b>, or <b>f</b> format, the <b>#</b> flag forces the output value to contain a decimal point in all cases.</td>
    <td>Decimal point appears only if digits follow it.</td>
  </tr>
  <tr>
    <td>#</td>
    <td>When used with the <b>g</b> or <b>G</b> format, the <b>#</b> flag forces the output value to contain a decimal point in all cases and prevents the truncation of trailing zeros.<br>Ignored when used with <b>d</b>, <b>i</b>, <b>u</b>, or <b>s</b>.</td>
    <td>Decimal point appears only if digits follow it. Trailing zeros are truncated.</td>
  </tr>
</table><br>
&nbsp;&nbsp;&nbsp; <b>Precision Specification</b><br>
<br>
The third optional field of the format specification is the precision specification. It specifies a nonnegative decimal integer, preceded by a period (.), which specifies the number of characters to be printed, the number of decimal places, or the number of significant digits (see Table below). Unlike the width specification, the precision specification can cause either truncation of the output value or rounding of a floating-point value. If precision is specified as 0 and the value to be converted is 0, the result is no characters output, as shown below:<br>
<br>
StringFormat( "%.0d", 0 );      /* No characters return */<br>
<br>
&nbsp;&nbsp;&nbsp; <b>How Precision Values Affect Type</b><br>
<br>
<br><table>
  <tr>
    <th><b>Type</b></th>
    <th><b>Meaning</b></th>
    <th><b>Default</b></th>
  </tr>
  <tr>
    <td>d, i, u, o, x, X</td>
    <td>The precision specifies the minimum number of digits to be printed. If the number of digits in the argument is less than precision, the output value is padded on the left with zeros. The value is not truncated when the number of digits exceeds precision.</td>
    <td>Default precision is 1.</td>
  </tr>
  <tr>
    <td>e, E</td>
    <td>The precision specifies the number of digits to be printed after the decimal point. The last printed digit is rounded.</td>
    <td>Default precision is 6; if precision is 0 or the period (.) appears without a number following it, no decimal point is printed.</td>
  </tr>
  <tr>
    <td>f </td>
    <td>The precision value specifies the number of digits after the decimal point. If a decimal point appears, at least one digit appears before it. The value is rounded to the appropriate number of digits.</td>
    <td>Default precision is 6; if precision is 0, or if the period (.) appears without a number following it, no decimal point is printed.</td>
  </tr>
  <tr>
    <td>g, G</td>
    <td>The precision specifies the maximum number of significant digits printed.</td>
    <td>Six significant digits are printed, with any trailing zeros truncated.</td>
  </tr>
  <tr>
    <td>s</td>
    <td>The precision specifies the maximum number of characters to be printed. Characters in excess of precision are not printed.</td>
    <td>Characters are printed until a null character is encountered.</td>
  </tr>
</table><br>

<h2>Related</h2>
None.


<h2 class="bottom">Example</h2>
<script type="text/javascript">
if ((navigator.appName=="Microsoft Internet Explorer") && (parseInt(navigator.appVersion)>=4)) // IE (4+) only
    function copyToClipboard(s){if (window.clipboardData && clipboardData.setData){clipboardData.setData("text", s + "\r\n");alert("Copied to clipboard");}}
</script>
<div class="codeSnippetContainer">
    <div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i))
{
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Open this Script"><param name="Item1" value=",Examples\\HelpFile\\StringFormat.au3,"></object>');
document.write('</div>');
}
</script>
    </div>
    <div class="codeSnippetContainerCodeContainer">
        <div class="codeSnippetToolBar">
            <div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName=="Microsoft Internet Explorer") && (parseInt(navigator.appVersion)>=4)) // IE (4+) only
    document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext0\').innerText)">Copy to clipboard</a>');
</script>
            </div>
        </div>
        <div id="copytext0" class="codeSnippetContainerCode" dir="ltr">
<div style="color:Black;"><pre>
<span><span class="S0">Example</span><span class="S8">()</span>

<span class="S5">Func</span><span class="S0"> Example</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$iInt_Unsigned</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S3">43951789</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$iInt_Negative</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S8">-</span><span class="S3">43951789</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S4">ConsoleWrite</span><span class="S8">(</span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">"Numeric Formats"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%d"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"standard positive integer with no sign"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 43951789</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Negative</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%d"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"standard negative integer with sign"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; -43951789</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%i"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"standard integer"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 43951789</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%09i"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"9 digits with leading zero"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 043951789</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%e"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"scientific notation"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 4.395179e+007</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%u"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"unsigned integer with positive integer"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 43951789</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Negative</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%u"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"unsigned integer with negative integer"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 4251015507</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%f"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"floating point"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 43951789.000000</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%.2f"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"floating point with 2 digits after decimal point"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 43951789.00</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%o"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"octal"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 247523255</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%s"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"string"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 43951789</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%x"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"hexadecimal (lower-case)"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 29ea6ad</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%X"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"hexadecimal (upper-case)"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; 29EA6AD</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Unsigned</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%+d"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"sign specifier on a positive integer"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; +43951789</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$iInt_Negative</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"%+d"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"sign specifier on a negative integer"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; -43951789</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sString</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S7">"string"</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sString_Long</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S7">"longstring"</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S4">ConsoleWrite</span><span class="S8">(</span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">"String Formats - [ ] used to show beginning/end of string"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$sString</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[%s]"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"standard string"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; [string]</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$sString</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[%10s]"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"10 chars right justified with added spaces"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; [ &nbsp;&nbsp;&nbsp;string]</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$sString</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[%-10s]"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"10 chars left justified with added spaces"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; [string &nbsp;&nbsp;&nbsp;]</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$sString_Long</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[%10.8s]"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"right justified but precision 8 so truncated"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; [ &nbsp;longer s]</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$sString_Long</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[%-10.8s]"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"left justifed but precision 8 so truncated"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; [longer s &nbsp;]</span>
<span class="S0">&nbsp; &nbsp; PrintFormat</span><span class="S8">(</span><span class="S9">$sString</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[%010s]"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"10 chars with leading zero"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; [0000string]</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S4">ConsoleWrite</span><span class="S8">(</span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">"Date Format - each % uses a new parameter"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S4">ConsoleWrite</span><span class="S8">(</span><span class="S7">'"%02i\%02i\%04i" 0n (1, 9, 2013) =&gt; '</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S4">StringFormat</span><span class="S8">(</span><span class="S7">"%02i\%02i\%04i"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">9</span><span class="S8">,</span><span class="S0"> </span><span class="S3">2013</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S8">)</span>
<span class="S5">EndFunc</span><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Example</span>

<span class="S5">Func</span><span class="S0"> PrintFormat</span><span class="S8">(</span><span class="S9">$vVar</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sFormat</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sExplan</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$iTab</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S3">0</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S4">ConsoleWrite</span><span class="S8">(</span><span class="S7">'"'</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$sFormat</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">'" on '</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$vVar</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@TAB</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">' =&gt; '</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S4">StringFormat</span><span class="S8">(</span><span class="S9">$sFormat</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$vVar</span><span class="S8">))</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">If</span><span class="S0"> </span><span class="S9">$iTab</span><span class="S0"> </span><span class="S5">Then</span><span class="S0"> </span><span class="S4">ConsoleWrite</span><span class="S8">(</span><span class="S6">@TAB</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S4">ConsoleWrite</span><span class="S8">(</span><span class="S6">@TAB</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">" ; "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$sExplan</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S8">)</span>
<span class="S5">EndFunc</span><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;PrintFormat</span>
<span class="S0"></span></span>
</pre></div>
		</div>
	</div>
</div>


</body>
</html>
