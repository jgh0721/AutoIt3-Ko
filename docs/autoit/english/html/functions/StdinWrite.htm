<!DOCTYPE html>
<html>
<head>
  <title>Function StdinWrite</title>
  <meta charset="ISO-8859-1">
  <link href="../css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1 class="small">Function Reference</h1>
<hr style="height:0px">
<h1>StdinWrite</h1>
<p class="funcdesc">Writes a number of characters to the STDIN stream of a previously run child process.<br></p>

<p class="codeheader">
StdinWrite ( process_id [, data] )<br>
</p>

<h2>Parameters</h2>
<table>
  <tr>
    <td style="width:15%">process_id</td>
    <td style="width:85%">The process ID of a child process, as returned by a previous call to Run.</td>
  </tr>
  <tr>
   <td>data</td>
   <td>	<b>[optional]</b> The data you wish to output.  This may either be text or binary.</td>
  </tr>
</table>


<h2>Return Value</h2>
<table class="noborder">
  <tr>
    <td style="width:10%" valign="top">Success:</td>
    <td style="width:90%">Returns the number of characters written.</td>
  </tr>
  <tr>
    <td valign="top">Failure:</td>
    <td>Sets @error to non-zero if STDIN was not redirected for the process or other error.</td>
  </tr>
</table>

<h2>Remarks</h2>
StdinWrite writes to the console standard input stream for a child process, which is normally used by console applications to read input from the user i.e. from the keyboard. During the call to Run for the child process you wish to write to the STD I/O parameter must have included the value of $STDIN_CHILD (1) for this function to work properly (see the <a href="Run.htm">Run</a> function).<br>
<br>
The optional second parameter is the string that you wish StdinWrite to write to the stream. If the function is called with no second argument, StdinWrite closes the stream and invalidates it for further writing.<br>
<br>
The stream is a first-in first-out buffer with an arbitrary limited size; if at any time when this function is called (unless it's being called to close the stream) there is no room for more characters to be written to the stream, the StdinWrite function will block (pause) and not return until the child process closes the stream or reads enough characters from the stream to permit the write procedure to complete. This means that the AutoIt process will be halted, and there will be no processing of hotkeys, GUI messages, etc. until the child process reads from the STDIN stream.<br>
<br>
Characters are converted to ANSI before being written.<br>
<br>
Binary data is written as-is.  It will not be converted to a string.  To print the hex representation of binary data, use the String() function to explicitly cast the data to a string.<br>
<br>

<h2>Related</h2>
<a href="StdoutRead.htm">StdoutRead</a>, <a href="StderrRead.htm">StderrRead</a>, <a href="StdioClose.htm">StdioClose</a>, <a href="Run.htm">Run</a>, <a href="RunAs.htm">RunAs</a>


<h2 class="bottom">Example</h2>
<script type="text/javascript">
if ((navigator.appName=="Microsoft Internet Explorer") && (parseInt(navigator.appVersion)>=4)) // IE (4+) only
    function copyToClipboard(s){if (window.clipboardData && clipboardData.setData){clipboardData.setData("text", s + "\r\n");alert("Copied to clipboard");}}
</script>
<div class="codeSnippetContainer">
    <div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i))
{
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Open this Script"><param name="Item1" value=",Examples\\HelpFile\\StdinWrite.au3,"></object>');
document.write('</div>');
}
</script>
    </div>
    <div class="codeSnippetContainerCodeContainer">
        <div class="codeSnippetToolBar">
            <div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName=="Microsoft Internet Explorer") && (parseInt(navigator.appVersion)>=4)) // IE (4+) only
    document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext0\').innerText)">Copy to clipboard</a>');
</script>
            </div>
        </div>
        <div id="copytext0" class="codeSnippetContainerCode" dir="ltr">
<div style="color:Black;"><pre>
<span><span class="S11">#include</span><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S0">Example</span><span class="S8">()</span>

<span class="S5">Func</span><span class="S0"> Example</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$iPID</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S4">Run</span><span class="S8">(</span><span class="S7">"sort.exe"</span><span class="S8">,</span><span class="S0"> </span><span class="S6">@SystemDir</span><span class="S8">,</span><span class="S0"> </span><span class="S6">@SW_HIDE</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$STDIN_CHILD</span><span class="S0"> </span><span class="S8">+</span><span class="S0"> </span><span class="S9">$STDOUT_CHILD</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Write a string of items to be sorted to child sort.exe's Stdin.</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S4">StdinWrite</span><span class="S8">(</span><span class="S9">$iPID</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Banana"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">"Elephant"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">"Apple"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">"Deer"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">"Car"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Calling StdinWrite without a second parameter closes the stream.</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S4">StdinWrite</span><span class="S8">(</span><span class="S9">$iPID</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S7">""</span><span class="S0"> </span><span class="S1">; Store the output of StdoutRead to a variable.</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S5">While</span><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S9">$sOutput</span><span class="S0"> </span><span class="S8">&amp;=</span><span class="S0"> </span><span class="S4">StdoutRead</span><span class="S8">(</span><span class="S9">$iPID</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; Read the Stdout stream of the PID returned by Run.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S5">If</span><span class="S0"> </span><span class="S6">@error</span><span class="S0"> </span><span class="S5">Then</span><span class="S0"> </span><span class="S1">; Exit the loop if the process closes or StdoutRead returns an error.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S5">ExitLoop</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S5">EndIf</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">WEnd</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S4">MsgBox</span><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">""</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"The sorted string is: "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<span class="S5">EndFunc</span><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Example</span>
<span class="S0"></span></span>
</pre></div>
		</div>
	</div>
</div>


</body>
</html>
