<!DOCTYPE html>
<html>
<head>
  <title>Function StringRegExpReplace</title>
  <meta charset="ISO-8859-1">
  <link href="../css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1 class="small">Function Reference</h1>
<hr style="height:0px">
<h1>StringRegExpReplace</h1>
<p class="funcdesc">Replace text in a string based on regular expressions.<br></p>

<p class="codeheader">
StringRegExpReplace ( "test", "pattern", "replace" [, count = 0] )<br>
</p>

<h2>Parameters</h2>
<table>
  <tr>
    <td style="width:15%">test</td>
    <td style="width:85%">The string to check</td>
  </tr>
  <tr>
   <td>pattern</td>
   <td>The regular expression to compare.  See <A href="StringRegExp.htm">StringRegExp</a> for pattern definition characters.</td>
  </tr>
  <tr>
   <td>replace</td>
   <td>The text to replace the regular expression matching text with.  To insert matched group text, \0 - \9 (or $0 - $9) can be used as back-references.</td>
  </tr>
  <tr>
   <td>count</td>
   <td>	<b>[optional]</b> The number of times to execute the replacement in the string.  The default is 0.  Use 0 for global replacement.</td>
  </tr>
</table>


<h2>Return Value</h2>
<table class="noborder">
  <tr>
    <td style="width:10%" valign="top">Success:</td>
    <td style="width:90%">Returns an updated string based on regular expressions.</td>
  </tr>
  <tr>
    <td valign="top">Failure:</td>
    <td>Set @error.</td>
  </tr>
  <tr>
    <td valign="top">@error:</td>
    <td>Meaning</td>
  </tr>
  <tr>
    <td valign="top">0:</td>
    <td>Executed properly.  Check @extended for the number of replacements performed.</td>
  </tr>
  <tr>
    <td valign="top">2:</td>
    <td>Pattern invalid.  @extended = offset of error in pattern.</td>
  </tr>
</table>

<h2>Remarks</h2>
To separate back-references from actual (replaced) numbers, wrap it with half-round brackets, i.e: "${1}5".<br>
If "\" need to be in the replaced string they must be doubled. This is a consequence of the back-references mechanism.<br>
<br>

<h2>Related</h2>
<a href="StringRegExp.htm">StringRegExp</a>


<h2 class="bottom">Example</h2>
<script type="text/javascript">
if ((navigator.appName=="Microsoft Internet Explorer") && (parseInt(navigator.appVersion)>=4)) // IE (4+) only
    function copyToClipboard(s){if (window.clipboardData && clipboardData.setData){clipboardData.setData("text", s + "\r\n");alert("Copied to clipboard");}}
</script>
<div class="codeSnippetContainer">
    <div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i))
{
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Open this Script"><param name="Item1" value=",Examples\\HelpFile\\StringRegExpReplace.au3,"></object>');
document.write('</div>');
}
</script>
    </div>
    <div class="codeSnippetContainerCodeContainer">
        <div class="codeSnippetToolBar">
            <div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName=="Microsoft Internet Explorer") && (parseInt(navigator.appVersion)>=4)) // IE (4+) only
    document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext0\').innerText)">Copy to clipboard</a>');
</script>
            </div>
        </div>
        <div id="copytext0" class="codeSnippetContainerCode" dir="ltr">
<div style="color:Black;"><pre>
<span><span class="S11">#include</span><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S0">Test1</span><span class="S8">()</span>
<span class="S0">Test2</span><span class="S8">()</span>
<span class="S0">Test3</span><span class="S8">()</span>

<span class="S1">; This example demonstrates a basic replacement. &nbsp;It replaces the vowels aeiou</span>
<span class="S1">; with the @ character.</span>
<span class="S5">Func</span><span class="S0"> Test1</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sInput</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S7">"Where have all the flowers gone, long time passing?"</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S4">StringRegExpReplace</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[aeiou]"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"@"</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; Display</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<span class="S5">EndFunc</span><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Test1</span>

<span class="S1">; The following example demonstrates using back-references to change the date</span>
<span class="S1">; from MM/DD/YYYY to DD.MM.YYYY</span>
<span class="S5">Func</span><span class="S0"> Test2</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sInput</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S7">'some text1 12/31/2009 01:02:03 some text2'</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S6">@CRLF</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S7">'some text3 02/28/2009 11:22:33 some text4'</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S4">StringRegExpReplace</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'(\d</span><span class="S10">{2}</span><span class="S7">)/(\d</span><span class="S10">{2}</span><span class="S7">)/(\d</span><span class="S10">{4}</span><span class="S7">)'</span><span class="S8">,</span><span class="S0"> </span><span class="S7">' $2.$1.$3 '</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; Display</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<span class="S5">EndFunc</span><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Test2</span>

<span class="S1">; The following example demonstrates the need to double backslash</span>
<span class="S5">Func</span><span class="S0"> Test3</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sInput</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S7">'%CommonProgramFiles%\Microsoft Shared\'</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S4">StringRegExpReplace</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'%([^%]*?)%'</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'C:\\WINDOWS\\Some Other Folder$'</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; Display</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<span class="S5">EndFunc</span><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Test3</span>

<span class="S5">Func</span><span class="S0"> Display</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Format the output.</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S5">Local</span><span class="S0"> </span><span class="S9">$sMsg</span><span class="S0"> </span><span class="S8">=</span><span class="S0"> </span><span class="S4">StringFormat</span><span class="S8">(</span><span class="S7">"Input:\t%s\n\nOutput:\t%s"</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S4">MsgBox</span><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Results"</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sMsg</span><span class="S8">)</span>
<span class="S5">EndFunc</span><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Display</span>
<span class="S0"></span></span>
</pre></div>
		</div>
	</div>
</div>


</body>
</html>
